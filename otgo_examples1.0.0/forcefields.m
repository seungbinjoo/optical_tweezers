% FORCEFIELDS Optical force field generated by a focused optical beam
%
% Optical force field generated by a focused Gaussian beam in the
% transversal and longitudinal planes.
%
% See also Vector, Ray, BeamGauss, ParticleSpherical.
%
% This example is part of the OTGO - Optical Tweezers in Geometrical Optics
% software package, which complements the article by
% Agnese Callegari, Mite Mijalkov, Burak Gokoz & Giovanni Volpe
% 'Computational toolbox for optical tweezers in geometrical optics'
% (2014).

% Author: Agnese Callegari
% Date: 2014/01/01
% Version: 1.0.0

%% Workspace initialization
clear all;
close all;
clc;

%% Parameters

% Medium
nm = 1.33; % Medium refractive index

% Spherical Particle
R = 1.0e-06; % Particle radius [m]
np = 1.50; % Particle refractive index

% Focusing
f = 100e-6;	% Focal length [m]
NA = 1.30; % Numerical aperture
L = f*NA/nm; % Iris aperture [m]

% Trapping beam
Ex0 = 1e+4; % x electric field [V/m]
Ey0 = 1i*1e+4; % y electric field [V/m]
w0 = 80e-6; % Beam waist [m]
Nphi = 10; % Azimuthal divisions
Nr = 10; % Radial divisions
power = 5e-3; % power [W]

% Positions where to calculate the forces
x_v = [-1.4:0.2:1.4]*R;
y_v = [-1.4:0.2:1.4]*R;
z_v = [-2:0.2:2]*R;

%% Initialization

% Trapping beam
bg = BeamGauss(Ex0,Ey0,w0,L,Nphi,Nr);
bg = bg.normalize(power); % Set the power

% Calculates set of rays corresponding to focused optical beam
r = Ray.beam2focused(bg,f);

%% Simulation - Transversal plane

% Preallocation variables
ftx = zeros(numel(x_v),numel(y_v)); % x-coordinate of the force [N]
fty = zeros(numel(x_v),numel(y_v)); % y-coordinate of the force [N]
ftz = zeros(numel(x_v),numel(y_v)); % z-coordinate of the force [N]

for ix = 1:1:length(x_v)
    for iy = 1:1:length(y_v)
        
        % Display update message
        disp(['Transversal plane force calculation ' int2str(ix) '/' int2str(length(x_v)) ' - ' int2str(iy) '/' int2str(length(y_v)) ])

        % Spherical particle
        bead = ParticleSpherical(Point(x_v(ix),y_v(iy),0),R,nm,np);
        
        % Calculate force
        forces = bead.force(r);
        force = Vector(bead.sp.c.X,bead.sp.c.Y,bead.sp.c.Z, ...
            sum(forces.Vx(isfinite(forces.Vx))), ...
            sum(forces.Vy(isfinite(forces.Vy))), ...
            sum(forces.Vz(isfinite(forces.Vz))) ...
            );
        
        ftx(ix,iy) = force.Vx;
        fty(ix,iy) = force.Vy;
        ftz(ix,iy) = force.Vz;
        
    end
end

% Calculate force field (Vector)
ForceT = Vector(x_v'*ones(1,length(y_v)), (y_v'*ones(1,length(x_v)))', zeros(length(x_v),1)*zeros(1,length(y_v)), ftx, fty, ftz);

%% Figure - Transversal plane

figure

subplot(1,2,1)

% Set axis limits
xlim([x_v(1) x_v(end)]*1e+6)
ylim([y_v(1) y_v(end)]*1e+6)

hold on

% Plot reference bead
theta = [0:0.02:1]*2*pi;
xcirc = R*cos(theta)*1e+6;
ycirc = R*sin(theta)*1e+6;
fill3(xcirc, ycirc, 0*xcirc-1, [1 1 1]*0.9, 'edgecolor', [0 0 0])

% Plot force field
ftfact = (x_v(2)-x_v(1))*sqrt(2)*1e+6/(max(max(abs(ForceT.norm()))));
ForceT.plot('scale',[1e+6 ftfact]);

axis equal tight
box on
xlabel('x [\mum]')
ylabel('y [\mum]')

drawnow()

%% Simulation - Longitudinal plane

% Preallocation variables
flx = zeros(numel(z_v),numel(y_v)); % x-coordinate of the force [N]
fly = zeros(numel(z_v),numel(y_v)); % y-coordinate of the force [N]
flz = zeros(numel(z_v),numel(y_v)); % z-coordinate of the force [N]

for iz = 1:1:length(z_v)
    for iy = 1:1:length(y_v)

        % Display update message
        disp(['Longitudinal plane force calculation ' int2str(iz) '/' int2str(length(z_v)) ' - ' int2str(iy) '/' int2str(length(y_v)) ])

        % Spherical particle
        bead = ParticleSpherical(Point(0,y_v(iy),z_v(iz)),R,nm,np);

        % Calculate force
        forces = bead.force(r);
        force = Vector(bead.sp.c.X,bead.sp.c.Y,bead.sp.c.Z, ...
            sum(forces.Vx(isfinite(forces.Vx))), ...
            sum(forces.Vy(isfinite(forces.Vy))), ...
            sum(forces.Vz(isfinite(forces.Vz))) ...
            );
        
        flx(iz,iy) = force.Vx;
        fly(iz,iy) = force.Vy;
        flz(iz,iy) = force.Vz;
        
    end
end

% Calculate force field (Vector)
ForceL = Vector(z_v'*ones(1,numel(y_v)),(y_v'*ones(1,numel(z_v)))',zeros(numel(z_v),1)*zeros(1,numel(y_v)),...
    flz,fly,flx);

%% Figure - Longitudinal plane

subplot(1,2,2)

% set axis limits
xlim([x_v(1) x_v(end)]*1e+6)
zlim([z_v(1) z_v(end)]*1e+6)

hold on

% Plot reference bead
theta = [0:0.02:1]*2*pi;
xcirc = R*cos(theta)*1e+6;
ycirc = R*sin(theta)*1e+6;
fill3(xcirc, ycirc, 0*xcirc-1, [1 1 1]*0.9, 'edgecolor', [0 0 0])

% Plot force field
flfact = (x_v(2)-x_v(1))*sqrt(2)*1e+6/(max(max(abs(ForceL.norm()))));
ForceL.plot('scale',[1e+6 flfact]);

axis equal tight
box on
xlabel('z [\mum]')
ylabel('x [\mum]')