%% Demonstration of sampling from a Gaussian to produce discrete sequence
%% that simulates white noise --> xyz displacements
%% 1. Simulation of white noise
% Simulation parameters
total_time = 60; % 60 seconds
time_step = 0.1; % time step of 0.1 seconds
num_samples = total_time/time_step;

% Parameters of Gaussian we are sampling from
mean = 0;
variance = 1/time_step;

% Generate Gaussian random numbers with zero mean and unit variance
w_i_x = randn(1,num_samples);
w_i_y = randn(1,num_samples);
w_i_z = randn(1,num_samples);

% Rescale the sequence to obtain variance 1/sqrt(t)
W_i_x = w_i_x / sqrt(time_step);
W_i_y = w_i_y / sqrt(time_step);
W_i_z = w_i_z / sqrt(time_step);

% Plot white noise for xyz directions
figure;
tiledlayout(2,3,"TileSpacing","compact")

nexttile
t = linspace(0,total_time,num_samples);
scatter(t,W_i_x)
xlabel('t (s)')
ylabel('W_{i,x}')

nexttile
scatter(t,W_i_y)
xlabel('t (s)')
ylabel('W_{i,y}')

nexttile
scatter(t,W_i_z)
xlabel('t (s)')
ylabel('W_{i,z}')

%% 2. Resulting particle trajectory in xyz directions due to Brownian motion
r_x = zeros(num_samples,1);
r_y = zeros(num_samples,1);
r_z = zeros(num_samples,1);

for i = 1:num_samples-1
    r_x(i+1) = r_x(i) + sqrt(time_step) * w_i_x(i);
    r_y(i+1) = r_y(i) + sqrt(time_step) * w_i_y(i);
    r_z(i+1) = r_z(i) + sqrt(time_step) * w_i_z(i);
end

% Plot random walk trajectory for xyz directions
nexttile
plot(t,r_x)
xlabel('t (s)')
ylabel('r_{i,x}')

nexttile
plot(t,r_y)
xlabel('t (s)')
ylabel('r_{i,y}')

nexttile
plot(t,r_z)
xlabel('t (s)')
ylabel('r_{i,z}')